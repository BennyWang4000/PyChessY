
'''(* ------------------------------------------------------------------------------ *)
(* lists providing the nodes in each of the cardinal and intercardinal            *)
(* directions (N,NE,E,SE,S,SW,W,NW), indexed by the node of origin;               *)
(* these lists are used to generate edges for Queen, Rook and Bishop              *)
(* ------------------------------------------------------------------------------ *)

note: add [-1] in i_0 of each list
TODO: make all of it from 1~64 to 0~63 
'''
mN = [[-1],
      [9, 17, 25, 33, 41, 49, 57], [10, 18, 26, 34, 42, 50, 58], [11, 19, 27, 35, 43, 51, 59], [12, 20, 28, 36, 44, 52, 60], [
    13, 21, 29, 37, 45, 53, 61], [14, 22, 30, 38, 46, 54, 62], [15, 23, 31, 39, 47, 55, 63], [16, 24, 32, 40, 48, 56, 64],
    [17, 25, 33, 41, 49, 57], [18, 26, 34, 42, 50, 58], [19, 27, 35, 43, 51, 59], [20, 28, 36, 44, 52, 60], [
        21, 29, 37, 45, 53, 61], [22, 30, 38, 46, 54, 62], [23, 31, 39, 47, 55, 63], [24, 32, 40, 48, 56, 64],
    [25, 33, 41, 49, 57], [26, 34, 42, 50, 58], [27, 35, 43, 51, 59], [28, 36, 44, 52, 60], [
        29, 37, 45, 53, 61], [30, 38, 46, 54, 62], [31, 39, 47, 55, 63], [32, 40, 48, 56, 64],
    [33, 41, 49, 57], [34, 42, 50, 58], [35, 43, 51, 59], [36, 44, 52, 60], [
        37, 45, 53, 61], [38, 46, 54, 62], [39, 47, 55, 63], [40, 48, 56, 64],
    [41, 49, 57], [42, 50, 58], [43, 51, 59], [44, 52, 60], [
        45, 53, 61], [46, 54, 62], [47, 55, 63], [48, 56, 64],
    [49, 57], [50, 58], [51, 59], [52, 60], [
        53, 61], [54, 62], [55, 63], [56, 64],
    [57], [58], [59], [60], [61], [62], [63], [64],
    [], [], [], [], [], [], [], []
]

mNE = [[-1],
       [10, 19, 28, 37, 46, 55, 64], [11, 20, 29, 38, 47, 56], [
    12, 21, 30, 39, 48], [13, 22, 31, 40], [14, 23, 32], [15, 24], [16], [],
    [18, 27, 36, 45, 54, 63], [19, 28, 37, 46, 55, 64], [20, 29, 38,
                                                         47, 56], [21, 30, 39, 48], [22, 31, 40], [23, 32], [24], [],
    [26, 35, 44, 53, 62], [27, 36, 45, 54, 63], [28, 37, 46, 55, 64], [
        29, 38, 47, 56], [30, 39, 48], [31, 40], [32], [],
    [34, 43, 52, 61], [35, 44, 53, 62], [36, 45, 54, 63], [
        37, 46, 55, 64], [38, 47, 56], [39, 48], [40], [],
    [42, 51, 60], [43, 52, 61], [44, 53, 62], [
        45, 54, 63], [46, 55, 64], [47, 56], [48], [],
    [50, 59], [51, 60], [52, 61], [53, 62], [54, 63], [55, 64], [56], [],
    [58], [59], [60], [61], [62], [63], [64], [],
    [], [], [], [], [], [], [], []
]

mE = [[-1],
      [2, 3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 8], [
    4, 5, 6, 7, 8], [5, 6, 7, 8], [6, 7, 8], [7, 8], [8], [],
    [10, 11, 12, 13, 14, 15, 16], [11, 12, 13, 14, 15, 16], [
        12, 13, 14, 15, 16], [13, 14, 15, 16], [14, 15, 16], [15, 16], [16], [],
    [18, 19, 20, 21, 22, 23, 24], [19, 20, 21, 22, 23, 24], [
        20, 21, 22, 23, 24], [21, 22, 23, 24], [22, 23, 24], [23, 24], [24], [],
    [26, 27, 28, 29, 30, 31, 32], [27, 28, 29, 30, 31, 32], [
        28, 29, 30, 31, 32], [29, 30, 31, 32], [30, 31, 32], [31, 32], [32], [],
    [34, 35, 36, 37, 38, 39, 40], [35, 36, 37, 38, 39, 40], [
        36, 37, 38, 39, 40], [37, 38, 39, 40], [38, 39, 40], [39, 40], [40], [],
    [42, 43, 44, 45, 46, 47, 48], [43, 44, 45, 46, 47, 48], [
        44, 45, 46, 47, 48], [45, 46, 47, 48], [46, 47, 48], [47, 48], [48], [],
    [50, 51, 52, 53, 54, 55, 56], [51, 52, 53, 54, 55, 56], [
        52, 53, 54, 55, 56], [53, 54, 55, 56], [54, 55, 56], [55, 56], [56], [],
    [58, 59, 60, 61, 62, 63, 64], [59, 60, 61, 62, 63, 64], [
        60, 61, 62, 63, 64], [61, 62, 63, 64], [62, 63, 64], [63, 64], [64], []
]

mSE = [[-1],
       [], [], [], [], [], [], [], [],
       [2], [3], [4], [5], [6], [7], [8], [],
       [10, 3], [11, 4], [12, 5], [13, 6], [14, 7], [15, 8], [16], [],
       [18, 11, 4], [19, 12, 5], [20, 13, 6], [
    21, 14, 7], [22, 15, 8], [23, 16], [24], [],
    [26, 19, 12, 5], [27, 20, 13, 6], [28, 21, 14, 7], [
        29, 22, 15, 8], [30, 23, 16], [31, 24], [32], [],
    [34, 27, 20, 13, 6], [35, 28, 21, 14, 7], [36, 29, 22, 15, 8], [
        37, 30, 23, 16], [38, 31, 24], [39, 32], [40], [],
    [42, 35, 28, 21, 14, 7], [43, 36, 29, 22, 15, 8], [44, 37, 30, 23, 16], [
        45, 38, 31, 24], [46, 39, 32], [47, 40], [48], [],
    [50, 43, 36, 29, 22, 15, 8], [51, 44, 37, 30, 23, 16], [
        52, 45, 38, 31, 24], [53, 46, 39, 32], [54, 47, 40], [55, 48], [56], []
]

mS = [[-1],
      [], [], [], [], [], [], [], [],
      [1], [2], [3], [4], [5], [6], [7], [8],
      [9, 1], [10, 2], [11, 3], [12, 4], [
    13, 5], [14, 6], [15, 7], [16, 8],
    [17, 9, 1], [18, 10, 2], [19, 11, 3], [20, 12, 4], [
    21, 13, 5], [22, 14, 6], [23, 15, 7], [24, 16, 8],
    [25, 17, 9, 1], [26, 18, 10, 2], [27, 19, 11, 3], [28, 20, 12, 4], [
        29, 21, 13, 5], [30, 22, 14, 6], [31, 23, 15, 7], [32, 24, 16, 8],
    [33, 25, 17, 9, 1], [34, 26, 18, 10, 2], [35, 27, 19, 11, 3], [36, 28, 20, 12, 4], [
        37, 29, 21, 13, 5], [38, 30, 22, 14, 6], [39, 31, 23, 15, 7], [40, 32, 24, 16, 8],
    [41, 33, 25, 17, 9, 1], [42, 34, 26, 18, 10, 2], [43, 35, 27, 19, 11, 3], [44, 36, 28, 20, 12, 4], [
        45, 37, 29, 21, 13, 5], [46, 38, 30, 22, 14, 6], [47, 39, 31, 23, 15, 7], [48, 40, 32, 24, 16, 8],
    [49, 41, 33, 25, 17, 9, 1], [50, 42, 34, 26, 18, 10, 2], [51, 43, 35, 27, 19, 11, 3], [52, 44, 36, 28, 20, 12, 4], [
        53, 45, 37, 29, 21, 13, 5], [54, 46, 38, 30, 22, 14, 6], [55, 47, 39, 31, 23, 15, 7], [56, 48, 40, 32, 24, 16, 8]
]

mSW = [[-1],
       [], [], [], [], [], [], [], [],
       [], [1], [2], [3], [4], [5], [6], [7],
       [], [9], [10, 1], [11, 2], [12, 3], [13, 4], [14, 5], [15, 6],
       [], [17], [18, 9], [19, 10, 1], [20, 11, 2], [
    21, 12, 3], [22, 13, 4], [23, 14, 5],
    [], [25], [26, 17], [27, 18, 9], [28, 19, 10, 1], [
        29, 20, 11, 2], [30, 21, 12, 3], [31, 22, 13, 4],
    [], [33], [34, 25], [35, 26, 17], [36, 27, 18, 9], [
        37, 28, 19, 10, 1], [38, 29, 20, 11, 2], [39, 30, 21, 12, 3],
    [], [41], [42, 33], [43, 34, 25], [44, 35, 26, 17], [
        45, 36, 27, 18, 9], [46, 37, 28, 19, 10, 1], [47, 38, 29, 20, 11, 2],
    [], [49], [50, 41], [51, 42, 33], [52, 43, 34, 25], [53, 44, 35, 26, 17], [
        54, 45, 36, 27, 18, 9], [55, 46, 37, 28, 19, 10, 1]
]

mW = [[-1],
      [], [1], [2, 1], [3, 2, 1], [4, 3, 2, 1], [5, 4, 3, 2, 1], [
    6, 5, 4, 3, 2, 1], [7, 6, 5, 4, 3, 2, 1],
    [], [9], [10, 9], [11, 10, 9], [12, 11, 10, 9], [13, 12, 11, 10, 9], [
        14, 13, 12, 11, 10, 9], [15, 14, 13, 12, 11, 10, 9],
    [], [17], [18, 17], [19, 18, 17], [20, 19, 18, 17], [21, 20, 19, 18, 17], [
        22, 21, 20, 19, 18, 17], [23, 22, 21, 20, 19, 18, 17],
    [], [25], [26, 25], [27, 26, 25], [28, 27, 26, 25], [29, 28, 27, 26, 25], [
        30, 29, 28, 27, 26, 25], [31, 30, 29, 28, 27, 26, 25],
    [], [33], [34, 33], [35, 34, 33], [36, 35, 34, 33], [37, 36, 35, 34, 33], [
        38, 37, 36, 35, 34, 33], [39, 38, 37, 36, 35, 34, 33],
    [], [41], [42, 41], [43, 42, 41], [44, 43, 42, 41], [45, 44, 43, 42, 41], [
        46, 45, 44, 43, 42, 41], [47, 46, 45, 44, 43, 42, 41],
    [], [49], [50, 49], [51, 50, 49], [52, 51, 50, 49], [53, 52, 51, 50, 49], [
        54, 53, 52, 51, 50, 49], [55, 54, 53, 52, 51, 50, 49],
    [], [57], [58, 57], [59, 58, 57], [60, 59, 58, 57], [61, 60, 59, 58, 57], [
        62, 61, 60, 59, 58, 57], [63, 62, 61, 60, 59, 58, 57]
]

mNW = [[-1],
       [], [9], [10, 17], [11, 18, 25], [12, 19, 26, 33], [13, 20, 27, 34, 41], [
    14, 21, 28, 35, 42, 49], [15, 22, 29, 36, 43, 50, 57],
    [], [17], [18, 25], [19, 26, 33], [20, 27, 34, 41], [21, 28, 35,
                                                         42, 49], [22, 29, 36, 43, 50, 57], [23, 30, 37, 44, 51, 58],
    [], [25], [26, 33], [27, 34, 41], [28, 35, 42, 49], [
        29, 36, 43, 50, 57], [30, 37, 44, 51, 58], [31, 38, 45, 52, 59],
    [], [33], [34, 41], [35, 42, 49], [36, 43, 50, 57], [
        37, 44, 51, 58], [38, 45, 52, 59], [39, 46, 53, 60],
    [], [41], [42, 49], [43, 50, 57], [44, 51, 58], [
        45, 52, 59], [46, 53, 60], [47, 54, 61],
    [], [49], [50, 57], [51, 58], [52, 59], [53, 60], [54, 61], [55, 62],
    [], [57], [58], [59], [60], [61], [62], [63],
    [], [], [], [], [], [], [], []
]

'''
(* ------------------------------------------------------------------------------ *)
(* lists providing the nodes for generating edges for King, Knight and Pawn,      *)
(* indexed by the node of origin;                                                 *)
(* ------------------------------------------------------------------------------ *)

(* standard moves of the white/black King *)'''

mKing = [[-1],
         [2, 9, 10], [1, 3, 9, 10, 11], [2, 4, 10, 11, 12], [3, 5, 11, 12, 13], [
    4, 6, 12, 13, 14], [5, 7, 13, 14, 15], [6, 8, 14, 15, 16], [7, 15, 16],
    [1, 2, 10, 17, 18], [1, 2, 3, 9, 11, 17, 18, 19], [2, 3, 4, 10, 12, 18, 19, 20], [3, 4, 5, 11, 13, 19, 20, 21], [
    4, 5, 6, 12, 14, 20, 21, 22], [5, 6, 7, 13, 15, 21, 22, 23], [6, 7, 8, 14, 16, 22, 23, 24], [7, 8, 15, 23, 24],
    [9, 10, 18, 25, 26], [9, 10, 11, 17, 19, 25, 26, 27], [10, 11, 12, 18, 20, 26, 27, 28], [11, 12, 13, 19, 21, 27, 28, 29], [
    12, 13, 14, 20, 22, 28, 29, 30], [13, 14, 15, 21, 23, 29, 30, 31], [14, 15, 16, 22, 24, 30, 31, 32], [15, 16, 23, 31, 32],
    [17, 18, 26, 33, 34], [17, 18, 19, 25, 27, 33, 34, 35], [18, 19, 20, 26, 28, 34, 35, 36], [19, 20, 21, 27, 29, 35, 36, 37], [
    20, 21, 22, 28, 30, 36, 37, 38], [21, 22, 23, 29, 31, 37, 38, 39], [22, 23, 24, 30, 32, 38, 39, 40], [23, 24, 31, 39, 40],
    [25, 26, 34, 41, 42], [25, 26, 27, 33, 35, 41, 42, 43], [26, 27, 28, 34, 36, 42, 43, 44], [27, 28, 29, 35, 37, 43, 44, 45], [
    28, 29, 30, 36, 38, 44, 45, 46], [29, 30, 31, 37, 39, 45, 46, 47], [30, 31, 32, 38, 40, 46, 47, 48], [31, 32, 39, 47, 48],
    [33, 34, 42, 49, 50], [33, 34, 35, 41, 43, 49, 50, 51], [34, 35, 36, 42, 44, 50, 51, 52], [35, 36, 37, 43, 45, 51, 52, 53], [
    36, 37, 38, 44, 46, 52, 53, 54], [37, 38, 39, 45, 47, 53, 54, 55], [38, 39, 40, 46, 48, 54, 55, 56], [39, 40, 47, 55, 56],
    [41, 42, 50, 57, 58], [41, 42, 43, 49, 51, 57, 58, 59], [42, 43, 44, 50, 52, 58, 59, 60], [43, 44, 45, 51, 53, 59, 60, 61], [
    44, 45, 46, 52, 54, 60, 61, 62], [45, 46, 47, 53, 55, 61, 62, 63], [46, 47, 48, 54, 56, 62, 63, 64], [47, 48, 55, 63, 64],
    [49, 50, 58], [49, 50, 51, 57, 59], [50, 51, 52, 58, 60], [51, 52, 53, 59, 61], [
    52, 53, 54, 60, 62], [53, 54, 55, 61, 63], [54, 55, 56, 62, 64], [55, 56, 63]
]
'''
(* standard moves of the white/black Knight *)'''

mKnight = [[-1],
	[11,18],[12,17,19],[9,13,18,20],[10,14,19,21],[11,15,20,22],[12,16,21,23],[13,22,24],[14,23],
	[3,19,26],[4,20,25,27],[1,5,17,21,26,28],[2,6,18,22,27,29],[3,7,19,23,28,30],[4,8,20,24,29,31],[5,21,30,32],[6,22,31],
	[2,11,27,34],[1,3,12,28,33,35],[2,4,9,13,25,29,34,36],[3,5,10,14,26,30,35,37],[4,6,11,15,27,31,36,38],[5,7,12,16,28,32,37,39],[6,8,13,29,38,40],[7,14,30,39],
	[10,19,35,42],[9,11,20,36,41,43],[10,12,17,21,33,37,42,44],[11,13,18,22,34,38,43,45],[12,14,19,23,35,39,44,46],[13,15,20,24,36,40,45,47],[14,16,21,37,46,48],[15,22,38,47],
	[18,27,43,50],[17,19,28,44,49,51],[18,20,25,29,41,45,50,52],[19,21,26,30,42,46,51,53],[20,22,27,31,43,47,52,54],[21,23,28,32,44,48,53,55],[22,24,29,45,54,56],[23,30,46,55],
	[26,35,51,58],[25,27,36,52,57,59],[26,28,33,37,49,53,58,60],[27,29,34,38,50,54,59,61],[28,30,35,39,51,55,60,62],[29,31,36,40,52,56,61,63],[30,32,37,53,62,64],[31,38,54,63],
	[34,43,59],[33,35,44,60],[34,36,41,45,57,61],[35,37,42,46,58,62],[36,38,43,47,59,63],[37,39,44,48,60,64],[38,40,45,61],[39,46,62],
	[42,51],[41,43,52],[42,44,49,53],[43,45,50,54],[44,46,51,55],[45,47,52,56],[46,48,53],[47,54]
]

'''
(* standard moves of the white/black Pawn *)'''

mwPawn = [[-1],
          [], [], [], [], [], [], [], [],
          [17], [18], [19], [20], [21], [22], [23], [24],
          [25], [26], [27], [28], [29], [30], [31], [32],
          [33], [34], [35], [36], [37], [38], [39], [40],
          [41], [42], [43], [44], [45], [46], [47], [48],
          [49], [50], [51], [52], [53], [54], [55], [56],
          [57], [58], [59], [60], [61], [62], [63], [64],
          [], [], [], [], [], [], [], []
          ]

mbPawn = [[-1],
          [], [], [], [], [], [], [], [],
          [1], [2], [3], [4], [5], [6], [7], [8],
          [9], [10], [11], [12], [13], [14], [15], [16],
          [17], [18], [19], [20], [21], [22], [23], [24],
          [25], [26], [27], [28], [29], [30], [31], [32],
          [33], [34], [35], [36], [37], [38], [39], [40],
          [41], [42], [43], [44], [45], [46], [47], [48],
          [], [], [], [], [], [], [], []
          ]
'''
(* additional rank 2/7 move of the white/black Pawn *)'''

mwPawnR = [[-1],
           [], [], [], [], [], [], [], [],
           [25], [26], [27], [28], [29], [30], [31], [32],
           [], [], [], [], [], [], [], [],
           [], [], [], [], [], [], [], [],
           [], [], [], [], [], [], [], [],
           [], [], [], [], [], [], [], [],
           [], [], [], [], [], [], [], [],
           [], [], [], [], [], [], [], []
           ]

mbPawnR = [[-1],
           [], [], [], [], [], [], [], [],
           [], [], [], [], [], [], [], [],
           [], [], [], [], [], [], [], [],
           [], [], [], [], [], [], [], [],
           [], [], [], [], [], [], [], [],
           [], [], [], [], [], [], [], [],
           [33], [34], [35], [36], [37], [38], [39], [40],
           [], [], [], [], [], [], [], []
           ]
'''
(* capture moves of the white/black Pawn *)'''

mwPawnX = [[-1],
           [], [], [], [], [], [], [], [],
           [18], [17, 19], [18, 20], [19, 21], [
    20, 22], [21, 23], [22, 24], [23],
    [26], [25, 27], [26, 28], [27, 29], [
    28, 30], [29, 31], [30, 32], [31],
    [34], [33, 35], [34, 36], [35, 37], [
    36, 38], [37, 39], [38, 40], [39],
    [42], [41, 43], [42, 44], [43, 45], [
    44, 46], [45, 47], [46, 48], [47],
    [50], [49, 51], [50, 52], [51, 53], [
    52, 54], [53, 55], [54, 56], [55],
    [58], [57, 59], [58, 60], [59, 61], [
    60, 62], [61, 63], [62, 64], [63],
    [], [], [], [], [], [], [], []
]

mbPawnX = [[-1],
           [], [], [], [], [], [], [], [],
           [2], [1, 3], [2, 4], [3, 5], [4, 6], [5, 7], [6, 8], [7],
           [10], [9, 11], [10, 12], [11, 13], [
    12, 14], [13, 15], [14, 16], [15],
    [18], [17, 19], [18, 20], [19, 21], [
    20, 22], [21, 23], [22, 24], [23],
    [26], [25, 27], [26, 28], [27, 29], [
    28, 30], [29, 31], [30, 32], [31],
    [34], [33, 35], [34, 36], [35, 37], [
    36, 38], [37, 39], [38, 40], [39],
    [42], [41, 43], [42, 44], [43, 45], [
    44, 46], [45, 47], [46, 48], [47],
    [], [], [], [], [], [], [], []
]
'''
(* en passant moves of the white/black Pawn *)'''

mwPawnEP = [[-1],
            [], [], [], [], [], [], [], [],
            [], [], [], [], [], [], [], [],
            [], [], [], [], [], [], [], [],
            [], [], [], [], [], [], [], [],
            [42], [41, 43], [42, 44], [43, 45], [
                44, 46], [45, 47], [46, 48], [47],
            [], [], [], [], [], [], [], [],
            [], [], [], [], [], [], [], [],
            [], [], [], [], [], [], [], []
            ]

mbPawnEP = [[-1],
            [], [], [], [], [], [], [], [],
            [], [], [], [], [], [], [], [],
            [], [], [], [], [], [], [], [],
            [18], [17, 19], [18, 20], [19, 21], [
                20, 22], [21, 23], [22, 24], [23],
            [], [], [], [], [], [], [], [],
            [], [], [], [], [], [], [], [],
            [], [], [], [], [], [], [], [],
            [], [], [], [], [], [], [], []
            ]



class Nodes:
    __slots__= ('mKing','mKnight','mQueen','mRook','mBishop','mPawn_oppo','mPawn_main','mPawnR_oppo' ,'mPawnR_main' ,'mPawnX_oppo' ,'mPawnX_main' ,'mPawnEP_oppo','mPawnEP_main',)
    def __init__(self, side) -> None:
        assert side in ['w', 'b']
        self.mKing = mKing
        self.mKnight = mKnight
        self.mQueen = [mN, mNE, mE, mSE, mS, mSW, mW, mNW]
        self.mRook = [mN, mE, mS, mW]
        self.mBishop = [mNE, mSE, mSW, mNW]
        if side == 'w':
            self.mPawn_main = mwPawn
            self.mPawn_oppo = mbPawn
            self.mPawnR_main = mwPawnR
            self.mPawnR_oppo = mbPawnR
            self.mPawnX_main = mwPawnX
            self.mPawnX_oppo = mbPawnX
            self.mPawnEP_main = mwPawnEP
            self.mPawnEP_oppo = mbPawnEP
        elif side == 'b':
            self.mPawn_oppo = mwPawn
            self.mPawn_main = mbPawn
            self.mPawnR_oppo = mwPawnR
            self.mPawnR_main = mbPawnR
            self.mPawnX_oppo = mwPawnX
            self.mPawnX_main = mbPawnX
            self.mPawnEP_oppo = mwPawnEP
            self.mPawnEP_main = mbPawnEP


class WhiteNodes:
    __slots__= ('mKing','mKnight','mQueen','mRook','mBishop','mPawn_oppo','mPawn_main','mPawnR_oppo' ,'mPawnR_main' ,'mPawnX_oppo' ,'mPawnX_main' ,'mPawnEP_oppo','mPawnEP_main',)
    def __init__(self) -> None:
        self.mKing = mKing
        self.mKnight = mKnight
        self.mQueen = [mN, mNE, mE, mSE, mS, mSW, mW, mNW]
        self.mRook = [mN, mE, mS, mW]
        self.mBishop = [mNE, mSE, mSW, mNW]
        self.mPawn_main = mwPawn
        self.mPawn_oppo = mbPawn
        self.mPawnR_main = mwPawnR
        self.mPawnR_oppo = mbPawnR
        self.mPawnX_main = mwPawnX
        self.mPawnX_oppo = mbPawnX
        self.mPawnEP_main = mwPawnEP
        self.mPawnEP_oppo = mbPawnEP


class BlackNodes:
    __slots__= ('mKing','mKnight','mQueen','mRook','mBishop','mPawn_oppo','mPawn_main','mPawnR_oppo' ,'mPawnR_main' ,'mPawnX_oppo' ,'mPawnX_main' ,'mPawnEP_oppo','mPawnEP_main',)
    def __init__(self) -> None:
        self.mKing = mKing
        self.mKnight = mKnight
        self.mQueen = [mN, mNE, mE, mSE, mS, mSW, mW, mNW]
        self.mRook = [mN, mE, mS, mW]
        self.mBishop = [mNE, mSE, mSW, mNW]
        self.mPawn_oppo = mwPawn
        self.mPawn_main = mbPawn
        self.mPawnR_oppo = mwPawnR
        self.mPawnR_main = mbPawnR
        self.mPawnX_oppo = mwPawnX
        self.mPawnX_main = mbPawnX
        self.mPawnEP_oppo = mwPawnEP
        self.mPawnEP_main = mbPawnEP
